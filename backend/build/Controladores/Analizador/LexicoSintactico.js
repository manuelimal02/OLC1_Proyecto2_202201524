/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var LexicoSintactico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,18],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,19],$V8=[1,21],$V9=[1,22],$Va=[1,20],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[5,24,31,59,60,61,62,63,67,69,72,73,75,76,77,78],$Vf=[8,40],$Vg=[1,57],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,58],$Vo=[1,60],$Vp=[1,59],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[24,26],$Vw=[8,20,23],$Vx=[1,83],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[8,23,28,32,40,41,42,43,44,45,51,52,53,54,55,56,57],$VL=[8,23,28,40,56,57],$VM=[8,23,28,32,40,41,42,51,52,53,54,55,56,57],$VN=[8,23,28,32,40,51,52,53,54,55,56,57],$VO=[1,185],$VP=[23,28];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PUNTOYCOMA":8,"asignacion":9,"counts":10,"sentencia_if":11,"sentencia_for":12,"sentencia_while":13,"sentencia_dowhile":14,"ts_break":15,"ts_continue":16,"ts_return":17,"tipo_dato":18,"identificador":19,"IGUAL":20,"expresion":21,"matriz":22,"COMA":23,"ID":24,"incremento":25,"CORIZ":26,"ENTERO":27,"CORDE":28,"MAS_MAS":29,"MENOS_MENOS":30,"COUT":31,"MENOR_QUE":32,"ENDL":33,"DECIMAL":34,"CARACTER":35,"CADENA":36,"TRUE":37,"FALSE":38,"PARENTESIS_IZQUIERDO":39,"PARENTESIS_DERECHO":40,"MAS":41,"MENOS":42,"MULTICACION":43,"DIVISION":44,"MODULO":45,"POW":46,"TO_LOWER":47,"TO_UPPER":48,"ROUND":49,"TOSTRING":50,"MAYOR_QUE":51,"MENOR_IGUAL":52,"IGUAL_IGUAL":53,"DISTINTO":54,"MAYOR_IGUAL":55,"OR":56,"AND":57,"NOT":58,"INT":59,"DOUBLE":60,"CHAR":61,"BOOL":62,"STRING":63,"contenido2":64,"NEW":65,"contenido1":66,"IF":67,"LLAVE_DERECHA":68,"LLAVE_IZQUIERDA":69,"sentencia_else":70,"ELSE":71,"WHILE":72,"DO":73,"verificacion_for":74,"FOR":75,"BREAK":76,"CONTINUE":77,"RETURN":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",20:"IGUAL",23:"COMA",24:"ID",26:"CORIZ",27:"ENTERO",28:"CORDE",29:"MAS_MAS",30:"MENOS_MENOS",31:"COUT",32:"MENOR_QUE",33:"ENDL",34:"DECIMAL",35:"CARACTER",36:"CADENA",37:"TRUE",38:"FALSE",39:"PARENTESIS_IZQUIERDO",40:"PARENTESIS_DERECHO",41:"MAS",42:"MENOS",43:"MULTICACION",44:"DIVISION",45:"MODULO",46:"POW",47:"TO_LOWER",48:"TO_UPPER",49:"ROUND",50:"TOSTRING",51:"MAYOR_QUE",52:"MENOR_IGUAL",53:"IGUAL_IGUAL",54:"DISTINTO",55:"MAYOR_IGUAL",56:"OR",57:"AND",58:"NOT",59:"INT",60:"DOUBLE",61:"CHAR",62:"BOOL",63:"STRING",65:"NEW",67:"IF",68:"LLAVE_DERECHA",69:"LLAVE_IZQUIERDA",71:"ELSE",72:"WHILE",73:"DO",75:"FOR",76:"BREAK",77:"CONTINUE",78:"RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[7,4],[7,2],[7,1],[19,3],[19,1],[9,3],[9,1],[9,9],[25,2],[25,2],[10,4],[10,7],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,1],[21,7],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,6],[21,2],[21,4],[21,4],[21,4],[21,4],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,2],[18,1],[18,1],[18,1],[18,1],[18,1],[22,10],[22,15],[66,3],[66,1],[64,5],[64,3],[11,7],[11,8],[70,2],[70,4],[13,7],[14,9],[74,1],[74,1],[12,11],[15,1],[16,1],[17,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1];

break;
case 2:

    $$[$0-1].push($$[$0]); 
    this.$=$$[$0-1];

break;
case 3: case 18:

    this.$=[$$[$0]];

break;
case 4: case 5: case 6: case 11: case 12: case 13:

    this.$=$$[$0-1];

break;
case 7: case 8: case 9: case 10: case 16: case 72: case 73:

    this.$=$$[$0];

break;
case 14:

    this.$ = new Declaracion.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]);

break;
case 15:

    this.$ = new Declaracion.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0], null);

break;
case 17:

    this.$=$$[$0-2].push($$[$0]);
    this.$=$$[$0-2];

break;
case 19:

    this.$ = new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);

break;
case 20:

    this.$=$$[$0]

break;
case 21:

    this.$ = new AsignacionMatriz.default($$[$0-8],$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);

break;
case 22:

    this.$ = new IncreDecre.default("INC", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);

break;
case 23:

    this.$ = new IncreDecre.default("DEC", _$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1]);

break;
case 24:

    this.$= new Cout.default($$[$0], _$[$0-3].first_line, _$[$0-3].first_column);

break;
case 25:

    this.$= new CoutEndl.default($$[$0-3], _$[$0-6].first_line, _$[$0-6].first_column);

break;
case 26:

    this.$ = new Nativo.default(new Tipo_Variable.default(Tipo_Variable.tipo_dato.ENTERO), $$[$0], _$[$0].first_line, _$[$0].first_column);

break;
case 27:

    this.$ = new Nativo.default(new Tipo_Variable.default(Tipo_Variable.tipo_dato.DECIMAL), $$[$0], _$[$0].first_line, _$[$0].first_column);

break;
case 28:

    var text = $$[$0].substr(0,$$[$0].length);
    text = text.replace(/\\n/g, "\n");
    text = text.replace(/\\\\/g, "\\");
    text = text.replace(/\\\"/g,"\"");
    text = text.replace(/\\r/g, "\r");
    text = text.replace(/\\t/g, "\t");
    text = text.replace(/\\\'/g, "'");

    this.$ = new Nativo.default(new Tipo_Variable.default(Tipo_Variable.tipo_dato.CARACTER), text, _$[$0].first_line, _$[$0].first_column);

break;
case 29:

    var text = $$[$0].substr(0,$$[$0].length);
    text = text.replace(/\\n/g, "\n");
    text = text.replace(/\\\\/g, "\\");
    text = text.replace(/\\\"/g,"\"");
    text = text.replace(/\\r/g, "\r");
    text = text.replace(/\\t/g, "\t");
    text = text.replace(/\\\'/g, "'");

    this.$ = new Nativo.default(new Tipo_Variable.default(Tipo_Variable.tipo_dato.CADENA), text, _$[$0].first_line, _$[$0].first_column);

break;
case 30:

    this.$ = new Nativo.default(new Tipo_Variable.default(Tipo_Variable.tipo_dato.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column); 

break;
case 31:
 
    this.$ = new Nativo.default(new Tipo_Variable.default(Tipo_Variable.tipo_dato.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column); 

break;
case 32:

    this.$ = new AccesoVariable.default($$[$0], _$[$0].first_line, _$[$0].first_column);

break;
case 33:

    this.$ = new AccesoMatriz.default($$[$0-6], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1]);

break;
case 34: case 69:

    this.$ = $$[$0-1];

break;
case 35:

    this.$ = new Aritmetica.default(Aritmetica.Operadores.SUMA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 36:

    this.$ = new Aritmetica.default(Aritmetica.Operadores.RESTA, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 37:

    this.$ = new Aritmetica.default(Aritmetica.Operadores.MULTICACION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 38:

    this.$ = new Aritmetica.default(Aritmetica.Operadores.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 39:

    this.$ = new Aritmetica.default(Aritmetica.Operadores.MODULO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 40:
 
    this.$ = new Aritmetica.default(Aritmetica.Operadores.POTENCIA, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]); 

break;
case 41:

    this.$ = new Aritmetica.default(Aritmetica.Operadores.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);

break;
case 42:

    this.$ = new FuncionToLower.default(FuncionToLower.Funcion.TOLOWER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 43:

    this.$ = new FuncionToUpper.default(FuncionToUpper.Funcion.TOUPPER, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 44:

    this.$ = new FuncionRound.default(FuncionRound.Funcion.ROUND, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 45:

    this.$ = new FuncionToString.default(FuncionToString.Funcion.TOSTRING, _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);

break;
case 46:

    this.$ = new Relacional.default(Relacional.Operador.MENORQUE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 

break;
case 47:
 
    this.$ = new Relacional.default(Relacional.Operador.MAYORQUE, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 

break;
case 48:
 
    this.$ = new Relacional.default(Relacional.Operador.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 

break;
case 49:
 
    this.$ = new Relacional.default(Relacional.Operador.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 

break;
case 50:
 
    this.$ = new Relacional.default(Relacional.Operador.DISTINTO, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 

break;
case 51:
 
    this.$ = new Relacional.default(Relacional.Operador.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]); 

break;
case 52:

    this.$ = new Logico.default(Logico.Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 53:

    this.$ = new Logico.default(Logico.Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);

break;
case 54:

    this.$ = new Logico.default(Logico.Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);

break;
case 55:

    this.$ = new Tipo_Variable.default(Tipo_Variable.tipo_dato.ENTERO);

break;
case 56:

    this.$ = new Tipo_Variable.default(Tipo_Variable.tipo_dato.DECIMAL);

break;
case 57:

    this.$ = new Tipo_Variable.default(Tipo_Variable.tipo_dato.CARACTER);

break;
case 58:

    this.$ = new Tipo_Variable.default(Tipo_Variable.tipo_dato.BOOLEANO);

break;
case 59:

    this.$ = new Tipo_Variable.default(Tipo_Variable.tipo_dato.CADENA);
    

break;
case 60:

    this.$=new DeclaracionMatriz.default($$[$0-9], _$[$0-9].first_line, _$[$0-9].first_column,$$[$0-8],$$[$0-1]);

break;
case 61:

    this.$=new DeclaracionMatriz.default($$[$0-14], _$[$0-14].first_line, _$[$0-14].first_column,$$[$0-13],null,parseInt($$[$0-4]),parseInt($$[$0-1]));

break;
case 62:

    $$[$0-2].push($$[$0]);
    this.$ = $$[$0-2];

break;
case 63:

    this.$ =[$$[$0]];

break;
case 64:

    $$[$0-4].push($$[$0-1]);
    this.$ = $$[$0-4];

break;
case 65:

    this.$ =[$$[$0-1]];

break;
case 66:

    this.$ = new ControlIf.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line, _$[$0-6].first_column);

break;
case 67:

    this.$ = new ControlIf.default($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line, _$[$0-7].first_column);

break;
case 68:
 
    let instrucciones = [];
    instrucciones.push($$[$0]);
    this.$ = instrucciones;

break;
case 70:

    this.$ = new ControlWhile.default($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column);

break;
case 71:

    this.$ = new ControlDoWhile.default($$[$0-2],$$[$0-6],_$[$0-8].first_line, _$[$0-8].first_column);

break;
case 74:

    this.$ = new ControlFor.default($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line, _$[$0-10].first_column);

break;
case 75:

    this.$ = new Break.default(_$[$0].first_line, _$[$0].first_column);

break;
case 76:

    this.$ = new Continue.default(_$[$0].first_line, _$[$0].first_column);

break;
case 77:

    this.$ = new Return.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);

break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},o($Ve,[2,3]),{8:[1,33]},{8:[1,34]},{8:[1,35]},o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{8:[1,36]},{8:[1,37]},{8:[1,38]},{19:39,24:[1,40]},{8:[2,16]},{20:[1,41],26:[1,42],29:[1,43],30:[1,44]},o($Vf,[2,20]),{32:[1,45]},{39:[1,46]},{39:[1,47]},{39:[1,48]},{68:[1,49]},{8:[2,75]},{8:[2,76]},{21:50,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},o($Vv,[2,55]),o($Vv,[2,56]),o($Vv,[2,57]),o($Vv,[2,58]),o($Vv,[2,59]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{8:[2,15],20:[1,66],23:[1,67]},o($Vw,[2,18],{26:[1,68]}),{21:69,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{27:[1,70]},o($Vf,[2,22]),o($Vf,[2,23]),{32:[1,71]},{21:72,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{7:74,9:75,18:14,22:15,24:$V0,25:17,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,74:73},{21:76,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{4:77,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{8:[2,77],32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},o($VK,[2,26]),o($VK,[2,27]),o($VK,[2,28]),o($VK,[2,29]),o($VK,[2,30]),o($VK,[2,31]),o($VK,[2,32],{26:[1,91]}),{21:92,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{39:[1,93]},{21:94,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{39:[1,95]},{39:[1,96]},{39:[1,97]},{39:[1,98]},{21:99,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:100,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{24:[1,101]},{28:[1,102]},o($Vf,[2,19],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),{28:[1,103]},{21:104,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{32:$Vx,40:[1,105],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{8:[1,106]},{8:[2,72]},{8:[2,73]},{32:$Vx,40:[1,107],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,69:[1,108],72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{21:109,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:110,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:111,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:112,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:113,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:114,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:115,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:116,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:117,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:118,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:119,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:120,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:121,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{27:[1,122]},{32:$Vx,40:[1,123],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{21:124,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},o($VK,[2,41]),{21:125,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:126,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:127,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{21:128,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},o($VL,[2,54],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH}),{8:[2,14],32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},o($Vw,[2,17]),{26:[1,129]},{26:[1,130]},{8:[2,24],32:[1,131],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{68:[1,132]},{21:133,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{68:[1,134]},{72:[1,135]},o($VM,[2,35],{43:$VA,44:$VB,45:$VC}),o($VM,[2,36],{43:$VA,44:$VB,45:$VC}),o($VK,[2,37]),o($VK,[2,38]),o($VK,[2,39]),o($VN,[2,46],{41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC}),o($VN,[2,47],{41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC}),o($VN,[2,48],{41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC}),o($VN,[2,49],{41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC}),o($VN,[2,50],{41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC}),o($VN,[2,51],{41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC}),o([8,23,28,40,56],[2,52],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,57:$VJ}),o($VL,[2,53],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH}),{28:[1,136]},o($VK,[2,34]),{23:[1,137],32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{32:$Vx,40:[1,138],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{32:$Vx,40:[1,139],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{32:$Vx,40:[1,140],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{32:$Vx,40:[1,141],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{28:[1,142]},{27:[1,143]},{21:114,24:$Vg,27:$Vh,32:[1,144],34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{4:145,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{8:[1,146],32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{4:147,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{39:[1,148]},{26:[1,149]},{21:150,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),{20:[1,151]},{28:[1,152]},{33:[1,153]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,69:[1,154],72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{9:155,24:$V0,25:17},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,69:[1,156],72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{21:157,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{27:[1,158]},{32:$Vx,40:[1,159],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{26:[1,160],65:[1,161]},{20:[1,162]},{8:[2,25]},o($Ve,[2,66],{70:163,71:[1,164]}),{40:[1,165]},o($Ve,[2,70]),{32:$Vx,40:[1,166],41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ},{28:[1,167]},o($VK,[2,40]),{26:[1,169],64:168},{18:170,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6},{21:171,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},o($Ve,[2,67]),{11:172,67:$V7,68:[1,173]},{68:[1,174]},{8:[1,175]},o($VK,[2,33]),{23:[1,177],28:[1,176]},{21:179,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu,66:178},{26:[1,180]},o($Vf,[2,21],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($Ve,[2,68]),{4:181,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{4:182,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},o($Ve,[2,71]),{8:[2,60]},{26:[1,183]},{23:$VO,28:[1,184]},o($VP,[2,63],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),{27:[1,186]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,69:[1,187],72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,22:15,24:$V0,25:17,31:$V1,59:$V2,60:$V3,61:$V4,62:$V5,63:$V6,67:$V7,69:[1,188],72:$V8,73:$V9,75:$Va,76:$Vb,77:$Vc,78:$Vd},{21:179,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu,66:189},o($VP,[2,65]),{21:190,24:$Vg,27:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,38:$Vm,39:$Vn,42:$Vo,46:$Vp,47:$Vq,48:$Vr,49:$Vs,50:$Vt,58:$Vu},{28:[1,191]},o($Ve,[2,69]),o($Ve,[2,74]),{23:$VO,28:[1,192]},o($VP,[2,62],{32:$Vx,41:$Vy,42:$Vz,43:$VA,44:$VB,45:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),{26:[1,193]},o($VP,[2,64]),{27:[1,194]},{28:[1,195]},{8:[2,61]}],
defaultActions: {15:[2,16],23:[2,75],24:[2,76],31:[2,1],74:[2,72],75:[2,73],153:[2,25],176:[2,60],195:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const Tipo_Variable          = require('./Simbolo/Tipo')
    const Nativo                 = require('./Expresiones/Nativo')
    const Aritmetica             = require('./Expresiones/Aritmetica')
    const Relacional             = require('./Expresiones/Relacional')
    const Logico                 = require('./Expresiones/Logico')
    const AccesoVariable         = require('./Expresiones/AccesoVariable')
    const Declaracion            = require('./Instrucciones/Declaracion')
    const Asignacion             = require('./Instrucciones/Asignacion')
    const Cout                   = require('./Instrucciones/Cout')
    const CoutEndl               = require('./Instrucciones/CoutEndl')
    const ControlIf              = require('./Control/If')
    const ControlWhile           = require('./Ciclos/While')
    const ControlDoWhile         = require('./Ciclos/DoWhile')
    const ControlFor             = require('./Ciclos/For')
    const Break                  = require('./Transferencia/Break')
    const Continue               = require('./Transferencia/Continue')
    const Return                 = require('./Transferencia/Return')
    const IncreDecre             = require('./Instrucciones/IncreDecre')
    const FuncionToLower         = require('./Expresiones/FuncionToLower')
    const FuncionToUpper         = require('./Expresiones/FuncionToUpper')
    const FuncionRound           = require('./Expresiones/FuncionRound')
    const FuncionToString        = require('./Expresiones/FuncionToString')
    const DeclaracionMatriz      = require('./Matriz/DeclaracionMatriz')
    const AsignacionMatriz       = require('./Matriz/AsignacionMatriz')
    const AccesoMatriz           = require('./Matriz/AccesoMatriz')
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:return 59
break;
case 4:return 60
break;
case 5:return 61
break;
case 6:return 62
break;
case 7:return 37
break;
case 8:return 38
break;
case 9:return 63
break;
case 10:return 31
break;
case 11:return 33
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 48
break;
case 15:return 49
break;
case 16:return 50
break;
case 17:return 67
break;
case 18:return 71
break;
case 19:return 72
break;
case 20:return 73
break;
case 21:return 75
break;
case 22:return 76
break;
case 23:return 77
break;
case 24:return 78
break;
case 25:return 65
break;
case 26:return 26
break;
case 27:return 28
break;
case 28:return 39
break;
case 29:return 40
break;
case 30:return 68
break;
case 31:return 69
break;
case 32:return 8
break;
case 33:return 'INTERROGACION'
break;
case 34:return 'DOSPUNTOS'
break;
case 35:return 23
break;
case 36:return 29
break;
case 37:return 41
break;
case 38:return 30
break;
case 39:return 42
break;
case 40:return 43
break;
case 41:return 44
break;
case 42:return 45
break;
case 43:return 53
break;
case 44:return 20
break;
case 45:return 54
break;
case 46:return 52
break;
case 47:return 55
break;
case 48:return 32
break;
case 49:return 51
break;
case 50:return 58
break;
case 51:return 56
break;
case 52:return 57
break;
case 53:return 24
break;
case 54:return 34
break;
case 55:return 27
break;
case 56:yy_.yytext=yy_.yytext.substr(1, yy_.yyleng-2); return 36;
break;
case 57:yy_.yytext=yy_.yytext.substr(1, yy_.yyleng-2); return 35
break;
case 58:
break;
case 59:
break;
case 60:return 5
break;
case 61: 
    var mensajeError = "Error léxico: carácter inesperado: " + yy_.yytext;
    console.log(mensajeError);
    throw new Error(mensajeError); 

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:std::string\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:pow\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:std::toString\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:new\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:\?)/i,/^(?::)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:("(\\.|[^\\"])*"))/i,/^(?:[']\\\\[']|[']\\"[']|[']\\'[']|[']\\n[']|[']\\t[']|[']\\r[']|['].?['])/i,/^(?:[\ \r\t\f\t]+)/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = LexicoSintactico;
exports.Parser = LexicoSintactico.Parser;
exports.parse = function () { return LexicoSintactico.parse.apply(LexicoSintactico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}